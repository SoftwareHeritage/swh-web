hljs.registerLanguage("dafny",(()=>{"use strict";return e=>{
const t=/[a-zA-Z_<>]*/,s=["bool","char","imap","iset","int","map","multiset","nat","object","object?","ORDINAL","seq","set","array","bc"],a={
keyword:["abstract","allocated","as","assert","assume","break","by","calc","case","class","codatatype","colemma","const","constructor","copredicate","datatype","decreases","else","ensures","exists","export","extends","forall","fresh","function","ghost","if",,"import",,"include","inductive","invariant","is","iterator","label","lemma","match","method","modifies","modify","module","nameonly","new","newtype","old","opened","predicate","print","provides","reads","real","refines","requires","return","returns","reveal","reveals","static","string","then","this","trait","twostate","type","unchanged","var","while","witness","yield","yields"],
type:s,literal:["false","null","true"]},n={
begin:RegExp("(?<=[^:]:[\\s\\n]*)"+t.source),scope:"type"},r={
begin:"(?<!\\w)(&&|\\|\\||<==>|==>|<==|==|!=|!|>|<|>=|<=|\\+|-|\\*|/|%|>>|<<|&|\\||\\^|!!|in|!in|:=|:\\||::|=)(?!\\w)",
scope:"operator"};return{case_insensitive:!1,keywords:a,
contains:[e.QUOTE_STRING_MODE,e.C_LINE_COMMENT_MODE,e.NUMBER_MODE,e.COMMENT("/\\*","\\*/",{
contains:[{scope:"doctag",begin:"@\\w+"}]}),n,r,{
begin:"\\b("+s.join("|")+")\\b"+t.source,scope:"type"},{
begin:["(?:"+e.IDENT_RE+"\\s+)",t,/\s*(?=\()/],scope:{2:"title.function"},
keywords:a,contains:[{className:"params",begin:/\(/,end:/\)/,keywords:a,
relevance:0,
contains:[e.QUOTE_STRING_MODE,e.C_BLOCK_COMMENT_MODE,n,r,e.NUMBER_MODE]
},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]}]}}})());